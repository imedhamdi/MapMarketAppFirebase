// CHEMIN : public/js/main.js

/**
 * =================================================================
 * MAPMARKET - POINT D'ENTR√âE PRINCIPAL (main.js) - v2 (Robuste)
 * =================================================================
 * R√¥le : Orchestrer l'initialisation de l'application dans un ordre
 * pr√©cis et g√©rer les erreurs critiques de d√©marrage.
 */

// --- Import des modules ---
// Core
import { setupAuthListeners } from './auth.js';
import { initUIManager } from './ui.js';
import { setState } from './state.js';
import { showToast, showGlobalLoader, hideGlobalLoader } from './utils.js';
import { fetchCategories } from './services.js';

// Features
import { initializeMap } from './map.js';
import { initAdManager } from './ad-manager.js';
import { initAdDetail } from './ad-detail.js';
import { initChat } from './chat.js';

/**
 * Charge les donn√©es initiales critiques pour le fonctionnement de l'application.
 * En cas d'√©chec, cette fonction l√®ve une erreur pour interrompre le d√©marrage.
 * @throws {Error} Si les donn√©es essentielles ne peuvent √™tre charg√©es.
 */
async function initializeAppState() {
    try {
        showGlobalLoader("Chargement des donn√©es de l'application...");
        let categories = [];
        const cached = sessionStorage.getItem('categoriesCache');
        if (cached) {
            categories = JSON.parse(cached);
        } else {
            categories = await fetchCategories();
            sessionStorage.setItem('categoriesCache', JSON.stringify(categories));
        }
        setState({ allCategories: categories });
        console.log("√âtat initial de l'application charg√© (cat√©gories, etc.).");
    } catch (error) {
        console.error("Erreur critique lors du chargement des donn√©es de l'application:", error);
        // On propage l'erreur pour que le bloc catch principal de main() l'intercepte.
        // Cela arr√™te l'initialisation de l'application.
        throw new Error("Impossible de charger les donn√©es essentielles de l'application.");
    } finally {
        // Le loader est masqu√© dans tous les cas.
        hideGlobalLoader();
    }
}

/**
 * Fonction principale d'initialisation de l'application.
 * Orchestre le chargement des modules dans le bon ordre.
 */
async function main() {
    try {
        console.log("üöÄ DOM charg√©. Initialisation de MapMarket...");

        // --- √âTAPE 1 : Initialisation de l'interface utilisateur de base ---
        // Met en place les listeners pour les modales, les boutons globaux et s'abonne
        // aux changements d'√©tat pour les mises √† jour visuelles.
        // Doit √™tre ex√©cut√© t√¥t pour que l'UI puisse r√©agir aux √©tapes suivantes.
        initUIManager();

        // --- √âTAPE 2 : Mise en place de l'authentification ---
        // Lance l'√©couteur Firebase qui d√©tecte les changements de connexion/d√©connexion.
        // L'UI se mettra √† jour en cons√©quence gr√¢ce au travail fait √† l'√©tape 1.
        setupAuthListeners();

        // --- √âTAPE 3 : Chargement des donn√©es critiques ---
        // On attend que les donn√©es comme les cat√©gories soient charg√©es avant de continuer.
        // Si cette √©tape √©choue, l'application s'arr√™te ici.
        await initializeAppState();

        // --- √âTAPE 4 : Initialisation des fonctionnalit√©s principales ---
        // Maintenant que l'UI est pr√™te, l'auth est √©cout√©e et les donn√©es sont l√†,
        // on peut initialiser les modules qui en d√©pendent.
        initializeMap('map-view');
        initAdManager();
        initAdDetail();
        initChat();

        // --- √âTAPE 5 : Finalisation et Service Worker ---
        console.log("‚úÖ MapMarket initialis√© avec succ√®s.");
        showToast("Bienvenue sur MapMarket !", "info");

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js')
                .then(registration => console.log('Service Worker enregistr√© avec succ√®s:', registration))
                .catch(err => console.error('√âchec de l\'enregistrement du Service Worker:', err));
        }

    } catch (error) {
        // --- GESTION DES ERREURS CRITIQUES ---
        // Si une erreur est survenue dans l'une des √©tapes ci-dessus, on l'affiche
        // √† l'utilisateur et on arr√™te compl√®tement le processus.
        console.error("‚ùå Erreur critique lors de l'initialisation de l'application :", error);
        document.body.innerHTML = `
            <div style="text-align:center; padding: 2rem; font-family: sans-serif; color: #333;">
                <h1>Erreur Critique</h1>
                <p>L'application n'a pas pu d√©marrer correctement.</p>
                <p style="color: #888; font-size: 0.9rem;">D√©tail : ${error.message}</p>
            </div>`;
    }
}

// --- Point d'entr√©e ---
// Lance l'application une fois que le DOM est compl√®tement charg√© et pr√™t.
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', main);
} else {
    // Le DOM est d√©j√† pr√™t.
    main();
}
