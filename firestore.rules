rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to validate ad data before writing
    function isAdDataValid(data) {
      return data.title is string
        && data.title.size() > 0 && data.title.size() < 100
        && data.description is string && data.description.size() < 1000
        && data.price is number && data.price >= 0
        && data.category is string
        && data.location is latlng
        && data.userId == request.auth.uid;
    }

    // Helper function to validate user profile data
    function isProfileDataValid(data) {
      return data.displayName is string
        && data.displayName.size() > 2
        && data.displayName.size() < 50;
    }

    // Users: Logged-in users can read public profiles. Users can only create and update their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isProfileDataValid(request.resource.data);
      allow delete: if false; // Deleting should be done via Cloud Function
    }

    // Ads: Anyone can read ads. Only owners can manage their own ads.
    match /ads/{adId} {
      allow read: if true;
      allow create: if request.auth != null && isAdDataValid(request.resource.data);
      allow update: if request.auth != null
        && isOwner(resource.data.userId)
        && isAdDataValid(request.resource.data);
      allow delete: if request.auth != null && isOwner(resource.data.userId);
    }

    // Alerts: Users can manage only their own alerts
    match /alerts/{alertId} {
      allow read, create, update, delete: if request.auth != null && isOwner(resource.data.userId);
    }

    // Chats and messages: Only participants can access them
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participants;
      }

      allow read, update: if isParticipant();
      allow create: if request.auth != null
        && request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read, create: if request.auth != null
          && get(/databases/$(database)/documents/chats/$(chatId))
            .data.participants.hasAny([request.auth.uid]);
        allow update, delete: if false;
      }
    }
  }
}
